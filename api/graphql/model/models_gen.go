// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BonusMalusUsage string

const (
	BonusMalusUsagePrivate      BonusMalusUsage = "PRIVATE"
	BonusMalusUsageProfesionnal BonusMalusUsage = "PROFESIONNAL"
)

var AllBonusMalusUsage = []BonusMalusUsage{
	BonusMalusUsagePrivate,
	BonusMalusUsageProfesionnal,
}

func (e BonusMalusUsage) IsValid() bool {
	switch e {
	case BonusMalusUsagePrivate, BonusMalusUsageProfesionnal:
		return true
	}
	return false
}

func (e BonusMalusUsage) String() string {
	return string(e)
}

func (e *BonusMalusUsage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BonusMalusUsage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BonusMalusUsage", str)
	}
	return nil
}

func (e BonusMalusUsage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
